@* ===================================================================== *@
@* EMPLOYEES PAGE - EMPLOYEE MANAGEMENT COMPONENT                        *@
@* Full CRUD interface for managing McElroy Metal employees             *@
@* Route: /Employees (accessible from navigation)                        *@
@* ===================================================================== *@

@* Define the route for this page component *@
@page "/Employees"

@* Import necessary namespaces for Entity Framework, Telerik components, and data models *@
@using Microsoft.EntityFrameworkCore
@using Telerik.Blazor
@using Telerik.Blazor.Components
@using Telerik.SvgIcons
@using MMPD.Data.Data
@using MMPD.Data.Models
@using MMPD.Data.Context
@using MMPD.Shared.Components
@using MMPD.Shared.Layout
@using MMPD.Web.Components.Layout

@* Inject database context for data operations *@
@inject AppDbContext dbContext

@* ===================================================================== *@
@* PAGE HEADER - Consistent header with employee icon                    *@
@* ===================================================================== *@
<PageHeader PageTitle="Employees" CardIcon="@CustomIcons.Face" />

@* ===================================================================== *@
@* MAIN DATA GRID - Telerik Grid with full CRUD capabilities            *@
@* ===================================================================== *@
@* Configure Telerik Grid with pagination and CRUD capabilities *@
<TelerikGrid Data="@employees"
             Pageable="true"
             PageSize="15"
             Sortable="true"
             SortMode="@SortMode.Single"
             Size="@ThemeConstants.Grid.Size.Small"
             Resizable="true"
             Groupable="true"
             SelectionMode="GridSelectionMode.Single"
             Class="grid-text"
             AutoGenerateColumns="false"
             EditMode="@GridEditMode.Popup"
             ConfirmDelete="true"
             OnUpdate="@Update"
             OnCreate="@Add"
             OnDelete="@Delete"
             OnRowRender="@OnEmployeeRowRender"
             >
    @* Delete event handler *@

    @* ================================================================= *@
    @* GRID CONFIGURATION - Popup edit settings                         *@
    @* ================================================================= *@
    <GridSettings>
        <GridPopupEditSettings MaxHeight="600px"
                               MaxWidth="600px"
                               Title="Edit Employee"></GridPopupEditSettings> @* Note: Title should be "Edit Employee" *@
        <GridPopupEditFormSettings Columns="2" 
                                   ColumnSpacing="5px" 
                                   Orientation="@FormOrientation.Horizontal" 
                                   ButtonsLayout="FormButtonsLayout.End">
            @* Buttons aligned to end *@
        </GridPopupEditFormSettings>
    </GridSettings>

    @* ================================================================= *@
    @* GRID TOOLBAR - Search and add functionality                      *@
    @* ================================================================= *@
    <GridToolBarTemplate>
        @* Global search box with debounced input *@
        <GridSearchBox Placeholder="Search..."
                       DebounceDelay="300"
                       Fields="@SearchableFields"></GridSearchBox>
        @* Add new employee button *@
        <GridCommandButton Command="Add" Icon="SvgIcon.Plus">Add</GridCommandButton>
    </GridToolBarTemplate>

    @* ================================================================= *@
    @* GRID COLUMNS - Employee data fields and custom templates         *@
    @* ================================================================= *@
    <GridColumns>
        @* Basic personal information columns *@
        <GridColumn Field="@nameof(Employee.FirstName)" Title="First Name" Sortable="true" Filterable="false" />
        <GridColumn Field="LastName" Title="Last Name" Sortable="true" Filterable="false" />
        <GridColumn Field="JobTitle" Title="Job Title" Sortable="false" />

        @* Manager status with custom visual indicator *@
        <GridColumn Field="IsManager" Title="Manager" Sortable="true" Width="75px" Filterable="false" TextAlign="@ColumnTextAlign.Center">
            <Template Context="employee">
                @{
                    var isManager = ((Employee)employee).IsManager ?? false;
                }
                @if (isManager)
                {
                    @* Display star icon for managers *@
                    <TelerikSvgIcon Icon="@CustomIcons.Star"
                                    Size="@ThemeConstants.SvgIcon.Size.ExtraLarge"
                                    ThemeColor="@ThemeConstants.SvgIcon.ThemeColor.Primary"
                                    Class="" />
                }
                else
                {
                    @* No icon for non-managers *@
                }
            </Template>
        </GridColumn>

        @* Contact information columns (some hidden by default) *@
        <GridColumn Field="PhoneNumber" Title="Phone #" Filterable="false" Sortable="false" Visible="false" />
        <GridColumn Field="CellNumber" Title="Alt #" Filterable="false" Sortable="false" Visible="false" />
        <GridColumn Field="Extension" Width="75px" Title="Ext" Filterable="false" Sortable="false" />
        <GridColumn Field="Email" Title="Email" Sortable="false" Visible="false" />

        @* System and organizational information *@
        <GridColumn Field="NetworkId" Title="Network Id" Sortable="false" />
        <GridColumn Field="EmpAvatar" Title="Employee Avatar" Sortable="false" Filterable="false" Visible="false" />

        @* Navigation property columns (commented out) - replaced with lookup approach *@
        @* <GridColumn Field="EmpLocation.LocName" Title="Location" Sortable="true" Filterable="false" />
        <GridColumn Field="EmpDepartment.DeptName" Title="Department" Sortable="true" Filterable="false" /> *@

        @* Location assignment with dropdown editor *@
        <GridColumn Field="@nameof(Employee.Location)" Title="Location">
            <Template>
                @{
                    var employee = (Employee)context;
                    // Look up location name from ID using locations list
                    var locationName = locations.FirstOrDefault(l => l.Id == employee.Location)?.LocName;
                }
                @locationName
            </Template>
            <EditorTemplate>
                @{
                    var employee = (Employee)context;
                }
                @* Dropdown for selecting employee location *@
                <TelerikDropDownList Data="@locations"
                                     @bind-Value="@employee.Location"
                                     ValueField="Id" 
                                     TextField="LocName" /> 
            </EditorTemplate>
        </GridColumn>

        @* Department assignment with dropdown editor *@
        <GridColumn Field="@nameof(Employee.Department)" Title="Department">
            <Template>
                @{
                    var employee = (Employee)context;
                    // Look up department name from ID using departments list
                    var departmentName = departments.FirstOrDefault(d => d.Id == employee.Department)?.DeptName;
                }
                @departmentName
            </Template>
            <EditorTemplate>
                @{
                    var employee = (Employee)context;
                }
                @* Dropdown for selecting employee department *@
                <TelerikDropDownList Data="@departments"
                                     @bind-Value="@employee.Department"
                                     ValueField="Id" 
                                     TextField="DeptName" /> 
            </EditorTemplate>
        </GridColumn>
        @* Add this column before the RecordAdd column in Employees.razor *@
        <GridColumn Field="@nameof(Employee.Active)" Title="Status" Width="100px" Sortable="true" TextAlign="@ColumnTextAlign.Center">
            <Template>
                @{
                    var employee = (Employee)context;
                    var isActive = employee.Active ?? true;
                }
                <span class="status-badge @(isActive ? "status-active" : "status-inactive")">
                    @(isActive ? "Active" : "Inactive")
                </span>
            </Template>
            <EditorTemplate>
                @{
                    var employee = (Employee)context;
                }
                <div class="active-toggle-container">
                    <label class="toggle-label">Employee Status:</label>
                    <TelerikSwitch @bind-Value="employee.Active"
                                   OnLabel="Active"
                                   OffLabel="Inactive"
                                   Width="100px" />
                </div>
            </EditorTemplate>
        </GridColumn>

        @* Metadata column (non-editable, hidden) *@
        <GridColumn Field="RecordAdd" Sortable="true" Filterable="false" Visible="false" Editable="false" />

        @* ============================================================= *@
        @* COMMAND COLUMN - Action buttons for each employee row        *@
        @* ============================================================= *@
        <GridCommandColumn Width="300px" Title="Employee Admin">
            @* Custom info button to show employee details modal *@
            <GridCommandButton Command="Info"
                               OnClick="() => ShowEmployeeInfo((Employee)context)"
                               Icon="@CustomIcons.Emoji_People">Info</GridCommandButton>
            @* Standard CRUD operation buttons *@
            <GridCommandButton Command="Edit" Icon="SvgIcon.Pencil">Edit</GridCommandButton>
            <GridCommandButton Command="Save" Icon="SvgIcon.Save" ShowInEdit="true">Save</GridCommandButton>
            <GridCommandButton Command="Cancel" Icon="SvgIcon.Cancel" ShowInEdit="true">Cancel</GridCommandButton>
            <GridCommandButton Command="Delete" Icon="SvgIcon.Trash">Delete</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
</TelerikGrid>

@* ===================================================================== *@
@* EMPLOYEE DETAILS MODAL - Reference to employee details component      *@
@* ===================================================================== *@
<EmployeeCard @ref="EmployeeCardRef" Locations="@locations" Departments="@departments" />

@* ===================================================================== *@
@* LOADING INDICATOR - Show while data is being loaded                   *@
@* ===================================================================== *@
@if (isLoading)
{
    <p>Loading...</p>
}

@* ===================================================================== *@
@* COMPONENT STYLES - Grid and window styling                            *@
@* ===================================================================== *@
<style>
    /* Main grid text styling */
    .grid-text {
        font-family: Roboto; /* Consistent font family */
        overflow: hidden; /* Hide overflow */
        text-overflow: ellipsis; /* Show "..." for long text */
        white-space: nowrap; /* Prevent text wrapping */
    }

    /* Employee table styling (currently unused) */
    .employee-table {
        display: grid; /* Grid layout */
        border-collapse: collapse; /* Collapsed table borders */
        margin: 25px 0; /* Vertical margins */
        font-size: 0.9em; /* Slightly smaller font */
        min-width: 400px; /* Minimum table width */
    }

    /* Modal window title bar styling */
    .k-window-titlebar {
        background-color: var(--kendo-color-primary); /* Primary color background */
        color: white; /* White text */
        font-weight: 700; /* Bold font */
        font-size: 2em; /* Large font size */
        padding: 10px; /* Internal padding */
        text-align: center; /* Center text */
        text-transform: uppercase; /* All caps */
        letter-spacing: 1px; /* Letter spacing */
    }

    /* Employee table header styling */
    .employee-table thead tr {
        background-color: var(--kendo-color-primary); /* Primary color background */
        display: flex; /* Flexbox layout */
    }

    /* Add this CSS to the style section of each grid page */

    /* Status badge styling */
    .status-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.8em;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-active {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .status-inactive {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    /* Active toggle container in edit mode */
    .active-toggle-container {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: 8px;
        padding: 10px;
    }

    .toggle-label {
        font-weight: 600;
        margin-bottom: 5px;
        color: var(--kendo-color-primary);
        background: transparent !important;
        padding: 0 !important;
        text-transform: none !important;
        font-size: 0.9em;
    }

    /* Inactive row styling - gray out entire row */
    .k-grid tr.inactive-row {
        opacity: 0.5;
        background-color: #f8f9fa !important;
    }

        .k-grid tr.inactive-row:hover {
            background-color: #e9ecef !important;
        }

        .k-grid tr.inactive-row td {
            color: #6c757d !important;
        }

    /* Alternative styling for stricter graying out */
    .k-grid tr.inactive-row {
        filter: grayscale(60%);
        opacity: 0.6;
    }

        .k-grid tr.inactive-row:hover {
            filter: grayscale(40%);
            opacity: 0.8;
        }
</style>

@code {
    // =====================================================================
    // COMPONENT STATE PROPERTIES
    // =====================================================================

    /// <summary>
    /// List of locations for dropdown selections and lookups
    /// Loaded once during component initialization
    /// </summary>
    public List<Location> locations { get; set; } = new List<Location>();

    /// <summary>
    /// List of departments for dropdown selections and lookups
    /// Loaded once during component initialization
    /// </summary>
    private List<Department> departments { get; set; } = new List<Department>();

    /// <summary>
    /// List of employees to display in the grid
    /// Populated from database with complex sorting and includes
    /// </summary>
    private List<Employee> employees { get; set; } = new List<Employee>();

    /// <summary>
    /// Loading state indicator for UI feedback
    /// </summary>
    private bool isLoading = true;

    /// <summary>
    /// Reference to popup component (currently unused)
    /// </summary>
    private TelerikPopup? PopupRef { get; set; }

    /// <summary>
    /// Currently selected employee for details display
    /// </summary>
    private Employee? SelectedEmployee { get; set; }

    /// <summary>
    /// Reference to employee info window (currently unused)
    /// </summary>
    private TelerikWindow? EmpInfoWindow { get; set; }

    /// <summary>
    /// Controls visibility of employee details window
    /// </summary>
    private bool WindowVisible { get; set; }

    /// <summary>
    /// Reference to the EmployeeCard component for showing employee details
    /// </summary>
    private EmployeeCard? EmployeeCardRef { get; set; }

    private void OnEmployeeRowRender(GridRowRenderEventArgs args)
    {
        var employee = (Employee)args.Item;
        var isActive = employee.Active ?? true;

        if (!isActive)
        {
            args.Class = "inactive-row";
        }
    }

    // =====================================================================
    // USER INTERACTION METHODS
    // =====================================================================

    /// <summary>
    /// Shows employee details modal for the specified employee
    /// Delegates to EmployeeCard component
    /// </summary>
    /// <param name="employee">Employee to display details for</param>
    public void ShowEmployeeInfo(Employee employee)
    {
        // Alternative approach (commented out):
        // SelectedEmployee = employee;
        // OpenWindow();
        EmployeeCardRef.ShowEmployeeInfo(employee);
    }

    /// <summary>
    /// Generates dynamic window title for employee details
    /// </summary>
    /// <returns>Formatted title string</returns>
    private string GetWindowTitle()
    {
        return SelectedEmployee != null
            ? $"{SelectedEmployee.FirstName} {SelectedEmployee.LastName} - Details"
            : "Employee Information";
    }

    /// <summary>
    /// Opens the employee details window
    /// </summary>
    private void OpenWindow()
    {
        WindowVisible = true;
    }

    /// <summary>
    /// Shows popup for employee details (alternative approach)
    /// </summary>
    /// <param name="employee">Employee to show in popup</param>
    private void ShowPopup(Employee? employee)
    {
        if (employee != null)
        {
            SelectedEmployee = employee;
            PopupRef?.Show();
        }
    }

    // =====================================================================
    // COMPONENT LIFECYCLE METHODS
    // =====================================================================

    /// <summary>
    /// Component initialization - loads all required data from database
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Loads employee data with related entities and complex sorting
    /// Also loads reference data for locations and departments
    /// </summary>
    private async Task LoadDataAsync()
    {
        try
        {
            isLoading = true;

            // Load reference data for dropdowns
            locations = await dbContext.Locations.ToListAsync();
            departments = await dbContext.Departments.ToListAsync();

            // Load employees with complex Entity Framework query
            employees = await dbContext.Employees!
                /* .Where(e => e.Active == true)  */          // Only active employees
                .Include(e => e.EmpLocation)            // Include location navigation property
                .Include(e => e.EmpDepartment)          // Include department navigation property
                .OrderBy(e => e.EmpLocation!.LocName)   // Sort by location name first
                .ThenBy(e => e.EmpDepartment!.DeptName) // Then by department name
                .ThenBy(e => e.FirstName + e.LastName)  // Finally by full name
                .ToListAsync();
        }
        catch (Exception ex)
        {
            // Log error and handle gracefully
            Console.Error.WriteLine($"An error occurred while loading data: {ex.Message}");
            // Could set error message for UI display here
        }
        finally
        {
            isLoading = false;
        }
    }

    // =====================================================================
    // CRUD OPERATION METHODS
    // =====================================================================

    /// <summary>
    /// Updates an existing employee in the database
    /// Uses Entity Framework change tracking for efficient updates
    /// </summary>
    /// <param name="args">Grid command event arguments containing the updated employee</param>
    async Task Update(GridCommandEventArgs args)
    {
        // Alternative approach (commented out):
        // var index = employees.FindIndex(item => item.Id.Equals(((Employee)args.Item).Id));
        // employees[index] = (Employee)args.Item;

        try
        {
            var employee = (Employee)args.Item;
            var existingEmployee = await dbContext.Employees.FindAsync(employee.Id);

            if (existingEmployee != null)
            {
                // Use Entity Framework to copy values from updated employee to existing entity
                dbContext.Entry(existingEmployee).CurrentValues.SetValues(employee);
                await dbContext.SaveChangesAsync();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while updating employee: {ex.Message}");
        }
    }

    /// <summary>
    /// Adds a new employee to the database and local collection
    /// Sets the record creation timestamp
    /// </summary>
    /// <param name="args">Grid command event arguments containing the new employee</param>
    async Task Add(GridCommandEventArgs args)
    {
        // Alternative approach (commented out):
        // ((Employee)args.Item).Id = employees.Any() ? employees.Max(item => item.Id) + 1 : 1;
        // employees.Add((Employee)args.Item);

        try
        {
            var employee = (Employee)args.Item;
            employee.RecordAdd = DateTime.UtcNow;        // Set creation timestamp
            await dbContext.Employees.AddAsync(employee); // Add to database
            await dbContext.SaveChangesAsync();           // Save changes
            employees.Add(employee);                      // Add to local collection
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while adding employee: {ex.Message}");
        }
    }

    /// <summary>
    /// Deletes an employee from the database and local collection
    /// </summary>
    /// <param name="args">Grid command event arguments containing the employee to delete</param>
    async Task Delete(GridCommandEventArgs args)
    {
        // Alternative approach (commented out):
        // employees.RemoveAll(item => item.Id.Equals(((Employee)args.Item).Id));

        try
        {
            var employee = (Employee)args.Item;
            var existingEmployee = await dbContext.Employees.FindAsync(employee.Id);

            if (existingEmployee != null)
            {
                dbContext.Employees.Remove(existingEmployee); // Remove from database
                await dbContext.SaveChangesAsync();           // Save changes
                employees.Remove(employee);                   // Remove from local collection
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while deleting employee: {ex.Message}");
        }
    }

    // =====================================================================
    // UTILITY METHODS
    // =====================================================================

    /// <summary>
    /// Displays manager status as text (alternative to icon approach)
    /// </summary>
    /// <param name="employee">Employee to check manager status for</param>
    /// <returns>Text representation of manager status</returns>
    private string ManagerDisplay(Employee employee)
    {
        return employee.IsManager ?? false ? "Manager" : " ";
    }

    // =====================================================================
    // SEARCH CONFIGURATION
    // =====================================================================

    /// <summary>
    /// Fields that are searchable through the global search box
    /// Includes key employee identification fields
    /// </summary>
    private List<string> SearchableFields = new List<string>
    {
        nameof(Employee.FirstName),  // First name
        nameof(Employee.LastName),   // Last name
        nameof(Employee.JobTitle),   // Job title
        nameof(Employee.Extension)   // Phone extension
    };
}
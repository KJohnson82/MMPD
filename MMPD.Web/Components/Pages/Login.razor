@page "/login"
@using MMPD.Web.Services
@using System.ComponentModel.DataAnnotations
@using Telerik.Blazor.Components
@using Telerik.SvgIcons

@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<TelerikWindow Modal="true"
               Visible="true"
               Width="450px"
               Height="400px"
               CloseOnOverlayClick="false">
    <WindowTitle>
        <TelerikSvgIcon Icon="@SvgIcon.Lock" /> Login to MMPD
    </WindowTitle>
    <WindowContent>
        <div class="p-4">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <TelerikNotification ThemeColor="error" Visible="true" Class="mb-3">
                    @errorMessage
                </TelerikNotification>
            }

            <TelerikForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                <FormItems>
                    <FormItem Field="@nameof(LoginModel.Username)" LabelText="Username" />
                    <FormItem Field="@nameof(LoginModel.Password)" LabelText="Password" />
                </FormItems>
                <FormButtons>
                    <TelerikButton ButtonType="ButtonType.Submit" 
                                   ThemeColor="primary" 
                                   Icon="@SvgIcon.Login"
                                   Size="Large"
                                   Width="100%"
                                   Enabled="@(!isLoading)">
                        @(isLoading ? "Signing in..." : "Sign In")
                    </TelerikButton>
                </FormButtons>
            </TelerikForm>

            <div class="mt-4">
                <TelerikCard>
                    <CardHeader>
                        <TelerikSvgIcon Icon="@SvgIcon.User" /> Demo Accounts
                    </CardHeader>
                    <CardBody>
                        <div class="demo-accounts">
                            <div class="account-info mb-2">
                                <strong>Administrator:</strong><br />
                                <code>admin</code> / <code>admin123</code>
                            </div>
                            <div class="account-info mb-2">
                                <strong>User:</strong><br />
                                <code>user</code> / <code>user123</code>
                            </div>
                            <div class="account-info">
                                <strong>Viewer:</strong><br />
                                <code>viewer</code> / <code>viewer123</code>
                            </div>
                        </div>
                    </CardBody>
                </TelerikCard>
            </div>
        </div>
    </WindowContent>
</TelerikWindow>

<style>
    .demo-accounts {
        font-size: 0.9em;
    }
    
    .account-info {
        padding: 8px;
        background-color: #f8f9fa;
        border-radius: 4px;
        border-left: 3px solid #007bff;
    }
    
    .account-info code {
        background-color: #e9ecef;
        padding: 2px 4px;
        border-radius: 3px;
        font-size: 0.85em;
    }
</style>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = "";
    private bool isLoading = false;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = "";
        StateHasChanged();

        try
        {
            var result = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);

            if (result.Succeeded)
            {
                // Successful login - redirect
                NavigationManager.NavigateTo(ReturnUrl ?? "/", true);
            }
            else
            {
                errorMessage = result.Failure.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Login failed: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        [StringLength(20, ErrorMessage = "Username cannot exceed 20 characters")]
        public string Username { get; set; } = "";
        
        [Required(ErrorMessage = "Password is required")]
        [StringLength(30, ErrorMessage = "Password cannot exceed 30 characters")]
        public string Password { get; set; } = "";
    }
}
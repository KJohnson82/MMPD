@page "/plant/{locationID:int}/{departmentID:int}/{employeeID:int}"
@using MMPD.Data.Models
@using MMPD.Data.Context
@using MMPD.Data
@inject IDirectoryService DirectoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using MMPD.Shared.Components
@using MMPD.Shared.Layout
@using Telerik.Blazor
@using Telerik.Blazor.Components
@using Telerik.SvgIcons
@inject MMPD.Shared.Services.LayoutState LayoutState

<PageTitle>Plant Employee</PageTitle>

@if (Employee == null)
{
    <p>Loading employee...</p>
}
else
{
    <div class="button-page-container k-border-top-2 k-border-bottom-8 k-border-x-0 k-border-solid k-border-dark-subtle ">


        <div class="scrollable-wrapper">

            <div class="employee-details">
                <div class="employee-name-section k-mb-2">
                    <h1 class="employee-name">
                        @Employee.FirstName?.ToUpper() @Employee.LastName?.ToUpper()
                        @if (Employee.IsManager == true)
                        {
                            <span class="manager-star">★</span>
                        }
                    </h1>
                    <p class="job-title">@Employee.JobTitle</p>
                </div>

                <!-- Contact Details Section -->
                <div class="contact-details">
                    @if (!string.IsNullOrWhiteSpace(Employee.PhoneNumber) || !string.IsNullOrWhiteSpace(Employee.Extension))
                    {
                        <div class="contact-section section-left">
                            <div class="left-divider">PHONE</div>
                            <div class="contact-value">
                                @Employee.PhoneNumber
                                @if (!string.IsNullOrWhiteSpace(Employee.Extension))
                                {
                                    <span> | EXT: @Employee.Extension</span>
                                }
                            </div>
                        </div>
                    }

                    @if (!string.IsNullOrWhiteSpace(Employee.Email))
                    {
                        <div class="contact-section section-right">
                            <div class="right-divider">EMAIL</div>
                            <div class="contact-value" style="text-align: end;">@Employee.Email</div>
                        </div>
                    }

                    @if (!string.IsNullOrWhiteSpace(Employee.CellNumber))
                    {
                        <div class="contact-section section-left">
                            <div class="left-divider">CELL</div>
                            <div class="contact-value">@Employee.CellNumber</div>
                        </div>
                    }

                    @if (!string.IsNullOrWhiteSpace(Employee.NetworkId))
                    {
                        <div class="contact-section section-right">
                            <div class="right-divider">NETWORK ID</div>
                            <div class="contact-value" style="text-align: end;">@Employee.NetworkId</div>
                        </div>
                    }
                </div>
            </div>
        </div>


    </div>

    <style>

        .employee-details {
            background-color: var(--kendo-color-dark);
            padding: 0;
        }

        .employee-name-section {
            /* background-color: var(--kendo-color-dark); */
            padding: 20px 20px;
            text-align: center;
            border-bottom: 2px solid var(--kendo-color-primary);
        }

        .employee-name {
            color: var(--kendo-color-on-dark);
            font-size: xx-large;
            font-weight: bold;
            margin: 0 0 5px 0;
            letter-spacing: 2px;
        }

        .manager-star {
            color: #ffd700;
            margin-left: 8px;
        }

        .job-title {
            color: #ff6358;
            font-size: large;
            margin: 0;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .contact-details {
            background-color: var(--kendo-color-dark);
            padding: 2px;
        }

        .contact-section {
            /* border-bottom: 1px solid #444; */
            padding: 10px 0;
            /* padding-left: 40px; */
            position: relative;
            /* margin-bottom: 15px; */
        }

            .contact-section:last-child {
                border-bottom: none;
            }

        .contact-label {
            /* color: #ff6358; */
            color: var(--kendo-color-warning);
            font-size: medium;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 8px;
            border-bottom: 2px solid var(--kendo-color-tertiary-on-surface);
        }

        .contact-value {
            color: white;
            /* font-size: medium;
                    font-weight: normal; */
            font-size: clamp(0.9rem, 2vw + 0.75rem, 1.25rem);
            line-height: 1;
            /* letter-spacing: 1.25px; */
            letter-spacing: 0.5px;
        }

        .button-page-container {
            height: calc(100% - 60px);
            display: flex;
            flex-direction: column;
            background-color: var(--kendo-color-dark);
            padding-bottom: 10px;
            padding-top: 10px;
        }

        .scrollable-wrapper {
            flex: 1;
            overflow-y: auto;
            padding: 0;
            scrollbar-width: none;
            -ms-overflow-style: none;
        }

            .scrollable-wrapper::-webkit-scrollbar {
                display: none;
            }

        .footer {
            border-top: 6px solid red;
        }

        .left-divider {
            padding-top: 0.5rem;
            padding-bottom: 0.5rem;
            display: flex;
            align-items: center;
            font-size: 1.125rem;
            color: #d4af37;
            font-weight: 600;
            letter-spacing: 1.25px;
        }

            .left-divider::after {
                content: '';
                flex: 1;
                border-top: 3px solid #4a9eff;
                margin-left: 1rem;
            }

        .right-divider {
            padding-top: 0.5rem;
            padding-bottom: 0.5rem;
            display: flex;
            align-items: center;
            font-size: 1.125rem;
            color: #d4af37;
            font-weight: 600;
            letter-spacing: 1.25px;
        }

            .right-divider::before {
                content: '';
                flex: 1;
                border-top: 3px solid #4a9eff;
                margin-right: 1rem;
            }

        .divider-vertical {
            width: 2.5px;
            height: 3rem;
            background-color: #4a9eff;
            margin: 0 20px;
        }

        .section {
            position: relative;
            margin-bottom: 15px;
        }

        .section-right {
            padding-right: 2rem !important;
        }

        .section-left {
            padding-left: 2rem !important;
        }
    </style>
}

@code {
    [Parameter]
    public int locationID { get; set; }

    [Parameter]
    public int departmentID { get; set; }

    [Parameter]
    public int employeeID { get; set; }

    private Department? Department;
    private Employee? Employee;
    private HeaderCardModels.HeadInfoCardModel? EmployeeInfo;

    private List<FooterNav.FooterItem> FooterNavItems = new()
    {
        new FooterNav.FooterItem(CustomIcons.Home, "Home", "/"),
        new FooterNav.FooterItem(CustomIcons.Corporate, "Corporate", "/corporate"),
        new FooterNav.FooterItem(CustomIcons.MetalMart, "Metal Mart", "/metalmart"),
        new FooterNav.FooterItem(CustomIcons.ServiceCenter, "Service Center", "/servicecenter")
    };

    protected override async Task OnParametersSetAsync()
    {
        Employee = await DirectoryService.GetEmployeeByIdAsync(employeeID);

        if (Employee != null)
        {
            // Get department info for the header
            Department = await DirectoryService.GetDepartmentWithEmployeesAsync(departmentID);

            EmployeeInfo = HeaderCardModels.Employee(
                title: Department?.DeptName ?? Employee.EmpDepartment?.DeptName ?? "Plant Employee"
            );
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && EmployeeInfo != null)
        {
            LayoutState.SetHeader(EmployeeInfo);
            LayoutState.SetFooter(FooterNavItems);
        }
    }
}
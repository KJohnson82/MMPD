@* @page "/plant/{locationID:int}/{departmentID:int}/{employeeID:int}"
@using MMPD.Data.Models
@using MMPD.Data.Data
@using MMPD.Data.Context
@inject IDirectoryService DirectoryService
@using MMPD.Shared.Components
@using Telerik.Blazor.Components
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@using MMPD.Shared.Layout

<PageTitle>Plant Employee</PageTitle>

@if (Employee == null)
{
    <p>Loading employee...</p>
}
else
{
    <div class="flex flex-col h-screen">
        <section>
            <HeaderCard Info="EmployeeInfoCard" />
        </section>

        <div class="divide divide-none divide-y-2 py-0"></div>

        <section class="flex-grow bg-background justify-center overflow-y-scroll no-scrollbar">
            <section class="shadow-sm drop-shadow-sm">
                <BackButton />
            </section>

            <TelerikCard Class="mx-4 my-4 bg-primary text-white">
                <CardHeader>
                    <h2 class="text-2xl font-semibold">@Employee.FirstName @Employee.LastName</h2>
                    <p class="text-sm text-accent">@Employee.JobTitle</p>
                </CardHeader>
                <CardBody Class="bg-secondary">
                    <div class="text-sm space-y-1">
                        @if (!string.IsNullOrWhiteSpace(Employee.Email))
                        {
                            <div><strong>Email:</strong> @Employee.Email</div>
                        }
                        @if (!string.IsNullOrWhiteSpace(Employee.PhoneNumber))
                        {
                            <div><strong>Phone:</strong> @Employee.PhoneNumber</div>
                        }
                        @if (!string.IsNullOrWhiteSpace(Employee.Extension))
                        {
                            <div><strong>Extension:</strong> @Employee.Extension</div>
                        }
                        @if (!string.IsNullOrWhiteSpace(Employee.CellNumber))
                        {
                            <div><strong>Cell:</strong> @Employee.CellNumber</div>
                        }
                        @if (!string.IsNullOrWhiteSpace(Employee.NetworkId))
                        {
                            <div><strong>Network ID:</strong> @Employee.NetworkId</div>
                        }
                    </div>
                </CardBody>
                
            </TelerikCard>
        </section>

        <div class="divide divide-none divide-y-2 py-0"></div>
        <section class="box-border pb-3 mt-0">
            <FooterNav Items="FooterNav" />
        </section>
    </div>
}

@code {
    [Parameter] public int locationID { get; set; }
    [Parameter] public int departmentID { get; set; }
    [Parameter] public int employeeID { get; set; }

    private Department? Department;
    private Employee? Employee;
    private HeaderCardModels.HeadInfoCardModel EmployeeInfoCard = new();

    private List<FooterNav.FooterItem> FooterNav = new()
    {
        new(CustomIcons.Home, "Home", "/"),
        new(CustomIcons.Corporate, "Corporate", "/corporate"),
        new(CustomIcons.MetalMart, "Metal Mart", "/metalmart"),
        new(CustomIcons.ServiceCenter, "Service Center", "/servicecenter")
    };

    protected override async Task OnParametersSetAsync()
    {

        Employee = await DirectoryService.GetEmployeeByIdAsync(employeeID);
       

        if (Employee is not null)
        {
            EmployeeInfoCard = new HeaderCardModels.HeadInfoCardModel
            {
                Title = Department?.DeptName ?? ""
            };
        }
    }

    private async void GoBack()
    {
        await JS.InvokeVoidAsync("goBack");
    }
}
 *@

@page "/plant/{locationID:int}/{departmentID:int}/{employeeID:int}"
@using MMPD.Data.Models
@using MMPD.Data.Data
@using MMPD.Data.Context
@inject IDirectoryService DirectoryService
@using MMPD.Shared.Components
@using Telerik.Blazor.Components
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@using MMPD.Shared.Layout
@inject MMPD.Shared.Services.LayoutState LayoutState

<PageTitle>Plant Employee</PageTitle>

@if (Employee == null)
{
    <p>Loading employee...</p>
}
else
{
    <div class="button-page-container k-border-top-2 k-border-bottom-8 k-border-x-0 k-border-solid k-border-dark-subtle">
        <div class="scrollable-wrapper">

            <!-- Employee Name Section -->
            <div class="employee-name-section k-mb-2">
                <h1 class="employee-name">
                    @Employee.FirstName.ToUpper() @Employee.LastName.ToUpper()
                    @if (Employee.IsManager == true)
                    {
                        <span class="manager-star">★</span>
                    }
                </h1>
                <p class="job-title">@Employee.JobTitle</p>
            </div>

            <!-- Contact Details Section -->
            <div class="contact-details">
                @if (!string.IsNullOrWhiteSpace(Employee.PhoneNumber) || !string.IsNullOrWhiteSpace(Employee.Extension))
                {
                    <div class="contact-section">
                        <div class="contact-label">PHONE</div>
                        <div class="contact-value">
                            @Employee.PhoneNumber
                            @if (!string.IsNullOrWhiteSpace(Employee.Extension))
                            {
                                <span> | EXT: @Employee.Extension</span>
                            }
                        </div>
                    </div>
                }

                @if (!string.IsNullOrWhiteSpace(Employee.Email))
                {
                    <div class="contact-section">
                        <div class="contact-label">EMAIL</div>
                        <div class="contact-value">@Employee.Email</div>
                    </div>
                }

                @if (!string.IsNullOrWhiteSpace(Employee.CellNumber))
                {
                    <div class="contact-section">
                        <div class="contact-label">CELL</div>
                        <div class="contact-value">@Employee.CellNumber</div>
                    </div>
                }

                @if (!string.IsNullOrWhiteSpace(Employee.NetworkId))
                {
                    <div class="contact-section">
                        <div class="contact-label">NETWORK ID</div>
                        <div class="contact-value">@Employee.NetworkId</div>
                    </div>
                }
            </div>
        </div>
    </div>

    <style>
        .employee-name-section {
            padding: 20px 20px;
            text-align: center;
            border-bottom: 2px solid var(--kendo-color-primary);
        }

        .employee-name {
            color: var(--kendo-color-on-dark);
            font-size: xx-large;
            font-weight: bold;
            margin: 0 0 5px 0;
            letter-spacing: 2px;
        }

        .manager-star {
            color: #ffd700;
            margin-left: 8px;
        }

        .job-title {
            color: #ff6358;
            font-size: large;
            margin: 0;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .contact-details {
            background-color: var(--kendo-color-dark);
            padding: 2px;
        }

        .contact-section {
            padding: 10px 0;
            padding-left: 40px;
        }

            .contact-section:last-child {
                border-bottom: none;
            }

        .contact-label {
            color: var(--kendo-color-warning);
            font-size: medium;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 8px;
            border-bottom: 2px solid var(--kendo-color-tertiary-on-surface);
        }

        .contact-value {
            color: white;
            font-size: medium;
            font-weight: normal;
            letter-spacing: 0.5px;
        }

        .button-page-container {
            height: calc(100% - 60px);
            display: flex;
            flex-direction: column;
            background-color: var(--kendo-color-dark);
            padding-bottom: 10px;
            padding-top: 10px;
        }

        .scrollable-wrapper {
            flex: 1;
            overflow-y: auto;
            padding: 0;
            scrollbar-width: none;
            -ms-overflow-style: none;
        }

            .scrollable-wrapper::-webkit-scrollbar {
                display: none;
            }
    </style>
}

@code {
    [Parameter]
    public int locationID { get; set; }

    [Parameter]
    public int departmentID { get; set; }

    [Parameter]
    public int employeeID { get; set; }

    private Department? Department;
    private Employee? Employee;
    private HeaderCardModels.HeadInfoCardModel? EmployeeInfo;

    private List<FooterNav.FooterItem> FooterNavItems = new()
    {
        new FooterNav.FooterItem(CustomIcons.Home, "Home", "/"),
        new FooterNav.FooterItem(CustomIcons.Corporate, "Corporate", "/corporate"),
        new FooterNav.FooterItem(CustomIcons.MetalMart, "Metal Mart", "/metalmart"),
        new FooterNav.FooterItem(CustomIcons.ServiceCenter, "Service Center", "/servicecenter")
    };

    protected override async Task OnParametersSetAsync()
    {
        Employee = await DirectoryService.GetEmployeeByIdAsync(employeeID);

        if (Employee != null)
        {
            // Get department info for the header
            Department = await DirectoryService.GetDepartmentWithEmployeesAsync(departmentID);

            EmployeeInfo = HeaderCardModels.Employee(
                title: Department?.DeptName ?? Employee.EmpDepartment?.DeptName ?? "Plant Employee"
            );
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && EmployeeInfo != null)
        {
            LayoutState.SetHeader(EmployeeInfo);
            LayoutState.SetFooter(FooterNavItems);
        }
    }
}
@page "/plant/{locationID:int}/{departmentID:int}"
@using MMPD.Data.Models
@using MMPD.Data.Context
@using MMPD.Data
@inject IDirectoryService DirectoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using MMPD.Shared.Components
@using MMPD.Shared.Layout
@using Telerik.Blazor
@using Telerik.Blazor.Components
@using Telerik.SvgIcons
@inject MMPD.Shared.Services.LayoutState LayoutState

<PageTitle>Plant Department</PageTitle>

@if (Department == null)
{
    <p>Loading department...</p>
}
else
{
    <div class="button-page-container">
        <div class="scrollable-wrapper">

            <TelerikListView Data="@Department.Employees" EnableLoaderContainer="true" Class="button-list-container" Pageable="false">
                <Template Context="emp">
                    <NavLink href="@($"/plant/{locationID}/{departmentID}/{emp.Id}")" class="text-decoration-none k-text-uppercase">
                        <div class="menu-item py-3 px-4 my-2 rounded-3 k-text-white tracking-wider k-font-size-lg" style="font-size: medium; font-weight: bold; letter-spacing: 2px;">
                            <div class="k-align-items-center">
                                @emp.FirstName @emp.LastName @if (emp.IsManager == true)
                                {
                                    <span class="k-color-warning ps-1 "><TelerikSvgIcon Icon="@SvgIcon.Star" Size="@ThemeConstants.SvgIcon.Size.Large" /></span>
                                }
                            </div>
                            <div class="k-color-dark k-font-bold k-font-size-sm ">@emp.JobTitle</div>
                        </div>
                    </NavLink>
                </Template>
            </TelerikListView>
        </div>
    </div>
}

<style>
/*     .menu-item {
        background-color: #ff6358;
        margin: 8px 10px;
        border-radius: 0.75rem;
        flex: 1;
        letter-spacing: 0.5px;
    }

        .menu-item:hover {
            transition: transform 0.2s ease-in, opacity 0.2s ease-in;
            transform: translateY(0) scale(0.95);
            background-color: #FA574B;
        }

    .button-page-container {
        height: calc(100% - 60px);
        display: flex;
        flex-direction: column;
        background-color: var(--kendo-color-secondary-emphasis);
    }

    .scrollable-wrapper {
        flex: 1;
        overflow-y: auto;
        margin: 5px 0;
        padding: 5px 0;
        scrollbar-width: none;
        -ms-overflow-style: none;
    }

        .scrollable-wrapper::-webkit-scrollbar {
            display: none;
        } */
</style>

@code {
    [Parameter]
    public int locationID { get; set; }

    [Parameter]
    public int departmentID { get; set; }

    private Department? Department;
    private HeaderCardModels.HeadInfoCardModel? DepartmentInfo;

    private List<FooterNav.FooterItem> FooterNavItems = new()
    {
        new FooterNav.FooterItem(CustomIcons.Home, "Home", "/"),
        new FooterNav.FooterItem(CustomIcons.Corporate, "Corporate", "/corporate"),
        new FooterNav.FooterItem(CustomIcons.MetalMart, "Metal Mart", "/metalmart"),
        new FooterNav.FooterItem(CustomIcons.ServiceCenter, "Service Center", "/servicecenter")
    };

    protected override async Task OnParametersSetAsync()
    {
        // Load the department with employees
        Department = await DirectoryService.GetDepartmentWithEmployeesAsync(departmentID);

        // Sort employees alphabetically by last name, then first name
        if (Department?.Employees != null)
        {
            Department.Employees = Department.Employees
                .OrderBy(e => e.LastName)
                .ThenBy(e => e.FirstName)
                .ToList();
        }

        // Create header info using the ForDepartment method
        if (Department != null)
        {
            DepartmentInfo = HeaderCardModels.ForDepartment(
                title: Department.DeptName ?? "Department",
                phone: Department.DeptPhone,
                email: Department.DeptEmail,
                manager: Department.DeptManager
            );
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && DepartmentInfo != null)
        {
            LayoutState.SetHeader(DepartmentInfo);
            LayoutState.SetFooter(FooterNavItems);
        }
    }
}
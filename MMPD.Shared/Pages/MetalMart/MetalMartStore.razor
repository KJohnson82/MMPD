@page "/metalmart/{storeID:int}"
@using MMPD.Data.Models
@using MMPD.Data.Context
@using MMPD.Data.Data
@inject IDirectoryService DirectoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using MMPD.Shared.Components
@using MMPD.Shared.Layout
@using Telerik.Blazor
@using Telerik.Blazor.Components
@using Telerik.SvgIcons
@inject MMPD.Shared.Services.LayoutState LayoutState

<PageTitle>Metal Mart Store</PageTitle>

@if (Store == null)
{
    <p>Loading store...</p>
}
else
{
    <div class="button-page-container k-border-top-2 k-border-bottom-8 k-border-x-0 k-border-solid k-border-dark-subtle">
        <div class="scrollable-wrapper">

            <!-- Store Name Section -->
            @* <div class="store-name-section ">
                <h1 class="store-name">
                    @Store.LocName?.ToUpper()
                </h1>
                
            </div> *@

            <!-- Store Details Section -->
            <div class="store-details">

                

                <div class="section">
                    <div class="two-column">
                        
                            @if (Store.LocNum.HasValue)
                            {
                                <div class="column ">
                                    <div class="right-divider">STORE</div>
                                    <div class="section-content">@Store.LocNum</div>
                                </div>
                            }
                            
                        
                        <div class="divider-vertical"></div>
                        @if (!string.IsNullOrWhiteSpace(Store.Hours))
                        {
                            <div class="column ">
                                <div class="left-divider">HOURS</div>
                                <div class="section-content">@Store.Hours</div>
                            </div>
                        }
                        
                    </div>
                </div>

                @if (!string.IsNullOrWhiteSpace(Store.Address))
                {
                    <div class="section ps-5">
                        <div class="left-divider">ADDRESS</div>
                        <div class="section-content address-text">
                            @Store.Address <br /> 
                            @Store.City, @Store.State @Store.Zipcode
                        </div>
                    </div>
                }

                <div class="section">
                    <div class="two-column">

                        @if (Store.LocNum.HasValue)
                        {
                            <div class="column ">
                                <div class="right-divider">PHONE</div>
                                <div class="section-content">@Store.PhoneNumber</div>
                            </div>
                        }


                        <div class="divider-vertical"></div>
                        @if (!string.IsNullOrWhiteSpace(Store.Hours))
                        {
                            <div class="column ">
                                <div class="left-divider">FAX</div>
                                <div class="section-content">@Store.FaxNumber</div>
                            </div>
                        }

                    </div>
                </div>

                @* @if (!string.IsNullOrWhiteSpace(Store.PhoneNumber))
                {
                    <div class="section">
                        <div class="detail-label">PHONE</div>
                        <div class="detail-value">@Store.PhoneNumber</div>
                    </div>
                }

                @if (!string.IsNullOrWhiteSpace(Store.FaxNumber))
                {
                    <div class="detail-section">
                        <div class="detail-label">FAX</div>
                        <div class="detail-value">@Store.FaxNumber</div>
                    </div>
                } *@

                @if (!string.IsNullOrWhiteSpace(Store.Email))
                {
                    <div class="section pe-5">
                        <div class="right-divider">EMAIL</div>
                        <div class="section-content" style="text-align: end;">@Store.Email</div>
                    </div>
                }

                

                @* @if (!string.IsNullOrWhiteSpace(Store.StoreManager))
                {
                    <div class="detail-section">
                        <div class="detail-label">STORE MANAGER</div>
                        <div class="detail-value">@Store.StoreManager</div>
                    </div>
                }

                @if (!string.IsNullOrWhiteSpace(Store.AreaManager))
                {
                    <div class="detail-section">
                        <div class="detail-label">AREA MANAGER</div>
                        <div class="detail-value">@Store.AreaManager</div>
                    </div>
                } *@
            </div>
        </div>
    </div>

    <style>
        .store-name-section {
            position: relative;
            margin-bottom: 15px;
            padding: 20px 20px;
            text-align: center;
            border-bottom: 2px solid var(--kendo-color-primary);
            
        }

        .store-name {
            color: var(--kendo-color-on-dark);
            font-size: xx-large;
            font-weight: bold;
            text-align: center;
            margin-bottom: 20px;
            margin: 0 0 5px 0;
            letter-spacing: 2px;
            padding: 10px 0;
            /* border-bottom: 3px solid var(--kendo-color-primary); */
        }

        .store-number {
            color: #ff6358;
            font-size: large;
            margin: 0;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .store-details {
            background-color: var(--kendo-color-dark);
            padding: 30px 0;
            

        }

        .detail-section {
            padding: 10px 0;
            padding-left: 40px;
        }

            .detail-section:last-child {
                border-bottom: none;
            }

        .detail-label {
            color: var(--kendo-color-warning);
            font-size: medium;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 8px;
            border-bottom: 2px solid var(--kendo-color-tertiary-on-surface);
        }

        .detail-value {
            color: white;
            font-size: medium;
            font-weight: normal;
            letter-spacing: 0.5px;
        }

        .button-page-container {
            height: calc(100% - 60px);
            display: flex;
            flex-direction: column;
            background-color: var(--kendo-color-dark);
            padding-bottom: 10px;
            padding-top: 10px;
            margin: 0;
            color: var(--kendo-color-on-dark);
            position: relative;
        }

        .scrollable-wrapper {
            flex: 1;
            overflow-y: auto;
            padding: 0;
            scrollbar-width: none;
            -ms-overflow-style: none;
        }

            .scrollable-wrapper::-webkit-scrollbar {
                display: none;
            }

        

        /* --- Main Section Container --- */
        /* Corresponds to: pt-1 pb-0 mt-0 */
        .store-hours-section {
            padding-top: 0.25rem;
            padding-bottom: 0;
            margin-top: 0;
        }

        /* --- Grid Container --- */
        /* Corresponds to: grid grid-cols-2 divide-x-2 divide-secondary */
        .store-hours-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr); /* Creates two equal columns */
        }

            /* This selector creates the vertical divider line between the columns */
            .store-hours-grid > .grid-column + .grid-column {
                border-left-width: 2px;
                border-color: var(--color-secondary);
            }

            /* --- Grid Columns --- */
            /* Corresponds to: ps-4 and pe-4 */
            .store-hours-grid .grid-column:first-child {
                padding-right: 1rem;
            }

            .store-hours-grid .grid-column:last-child {
                padding-left: 1rem;
            }

        /* --- DaisyUI "Divider" Component Recreation --- */
        /* Corresponds to: divider uppercase tracking-wide font-semibold text-accent */
        .custom-divider {
            display: flex;
            align-items: center;
            text-transform: uppercase;
            letter-spacing: 0.025em; /* tracking-wide */
            font-weight: 600; /* font-semibold */
            font-size: 0.875rem; /* Default divider font size */
            /* color: var(--color-accent); */
            margin-top: 1rem;
            margin-bottom: 1rem;
        }

            /* These pseudo-elements create the lines on either side of the text */
            .custom-divider::before,
            .custom-divider::after {
                content: "";
                flex-grow: 1;
                border-top: 1px solid var(--color-secondary);
            }

            /* Corresponds to: divider-start and divider-end */
            .custom-divider.align-left {
                /* Hides the left line and adds space */
                justify-content: flex-start;
                margin-left: -1rem; /* Adjust to align text with container edge */
            }

                .custom-divider.align-left::before {
                    display: none;
                }

                .custom-divider.align-left::after {
                    margin-left: 0.5rem;
                }

            .custom-divider.align-right {
                /* Hides the right line and adds space */
                justify-content: flex-end;
                margin-right: -1rem; /* Adjust to align text with container edge */
            }

                .custom-divider.align-right::after {
                    display: none;
                }

                .custom-divider.align-right::before {
                    margin-right: 0.5rem;
                }


        /* --- Value Text Styling --- */
        /* Corresponds to: text-lg text-inherit font-normal -mt-2 */
        .value-text {
            font-size: 1.125rem; /* text-lg */
            font-weight: 400; /* font-normal */
            margin-top: -0.75rem; /* Approximates -mt-2 after divider margin */
        }

            /* Corresponds to: text-end and text-start */
            .value-text.align-right {
                text-align: right;
            }

            .value-text.align-left {
                text-align: left;
            }

        body {
            margin: 0;
            padding: 0;
            background-color: #2a2a2a;
            font-family: Arial, sans-serif;
            color: white;
            min-height: 100vh;
        }

        .location-screen {
            background-color: #2a2a2a;
            color: white;
            max-width: 400px;
            margin: 0 auto;
            padding: 30px 25px;
            position: relative;
            min-height: 100vh;
        }

        .header {
            font-size: 28px;
            font-weight: bold;
            text-align: center;
            margin-bottom: 20px;
            letter-spacing: 1px;
            padding: 10px 0;
            border-bottom: 3px solid #4a9eff;
        }

        .section {
            position: relative;
            margin-bottom: 15px;
        }

            /* .section:not(:last-child)::after {
                content: '';
                position: absolute;
                bottom: -12px;
                left: 0;
                right: 0;
                height: 2px;
                background-color: #4a9eff;
            } */

        .section-header {
            color: #d4af37;
            font-weight: bold;
            font-size: 14px;
            margin-bottom: 8px;
            letter-spacing: 0.5px;
            text-decoration: underline;
            text-underline-offset: 2px;
            text-underline-position:;
        }

        .section-content {
            font-size: 1.25rem;
            line-height: 1;
            letter-spacing: 1.25px;
        }

        .two-column {
            display: flex;
            align-items: center;
        }

        .column {
            flex: 1;
        }

        .divider-vertical {
            width: 2.5px;
            height: 3rem;
            background-color: #4a9eff;
            margin: 0 20px;
        }

        .column:first-child {
            text-align: right;
        }

        .column:last-child {
            text-align: left;
        }

        .column .section-header {
            margin-bottom: 5px;
        }

        .address-text {
            line-height: 1.3;
        }

        .left-divider {
            padding-top: 0.5rem; /* py-3 */
            padding-bottom: 0.5rem; /* py-3 */
            display: flex; /* flex */
            align-items: center; /* items-center */
            font-size: 1.125rem; /* text-sm */
            color: #d4af37;
            font-weight: 600;
            letter-spacing: 1.25px;
        }

            .left-divider::after {
                content: '';
                flex: 1; /* after:flex-1 */
                border-top: 3px solid #4a9eff; /* after:border-t after:border-gray-200 */
                margin-left: 1rem; /* after:ms-6 */
            }

        /* Right-aligned label with divider line extending to the left */
        .right-divider {
            padding-top: 0.5rem; /* py-3 */
            padding-bottom: 0.5rem; /* py-3 */
            display: flex; /* flex */
            align-items: center; /* items-center */
            font-size: 1.125rem; /* text-sm */
            color: #d4af37;
            font-weight: 600;
            letter-spacing: 1.25px;
        }

            .right-divider::before {
                content: '';
                flex: 1; /* before:flex-1 */
                border-top: 3px solid #4a9eff; /* before:border-t before:border-gray-200 */
                margin-right: 1rem; /* before:me-6 */
            }

    </style>
}

@code {
    [Parameter]
    public int storeID { get; set; }

    private Location? Store;
    private HeaderCardModels.HeadInfoCardModel? StoreInfo;

    private List<FooterNav.FooterItem> FooterNavItems = new()
    {
        new FooterNav.FooterItem(CustomIcons.Home, "Home", "/"),
        new FooterNav.FooterItem(CustomIcons.Corporate, "Corporate", "/corporate"),
        new FooterNav.FooterItem(CustomIcons.MetalMart, "Metal Mart", "/metalmart"),
        new FooterNav.FooterItem(CustomIcons.ServiceCenter, "Service Center", "/servicecenter")
    };

    protected override async Task OnParametersSetAsync()
    {
        Store = await DirectoryService.GetLocationByIdAsync("metal mart", storeID);

        if (Store != null)
        {
            // You'll need to add a Store method to HeaderCardModels, or use Employee method
            StoreInfo = HeaderCardModels.Employee(
                title: Store.LocName ?? "Metal Mart Store"
            );
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && StoreInfo != null)
        {
            LayoutState.SetHeader(StoreInfo);
            LayoutState.SetFooter(FooterNavItems);
        }
    }
}
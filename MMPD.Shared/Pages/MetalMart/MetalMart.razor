@* 
Metal Mart locations directory page component.
Displays a scrollable list of all Metal Mart retail locations as navigation buttons.
Features area management hierarchy in header and location-based navigation.
Serves as the main landing page for Metal Mart section with territory manager information.
*@

@* Route definition for Metal Mart section root *@
@page "/metalmart"

@* Required using statements for data models and UI components *@
@using MMPD.Data.Models
@using MMPD.Data.Context
@using MMPD.Data
@using MMPD.Shared.Components
@using MMPD.Shared.Layout
@using Telerik.Blazor
@using Telerik.Blazor.Components
@using Telerik.SvgIcons

@* Required dependency injections for page functionality *@
@inject IDirectoryService DirectoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject MMPD.Shared.Services.LayoutState LayoutState

@* Page title for browser tab/window *@
<PageTitle>Metal Mart</PageTitle>

@* ===== LOADING STATE ===== *@
@* Display loading message while Metal Mart locations data is being fetched *@
@if (Locations == null || Locations.Count == 0)
{
    <p>Loading Metal Marts...</p>
}
else
{
    @* ===== MAIN CONTENT CONTAINER ===== *@
    @* 
    Full-height container with scrollable Metal Mart locations list.
    Uses flexible layout to fill available space minus header/footer.
    Inherits styling from parent components for consistency.
    *@
    <div class="button-page-container">
        <div class="scrollable-wrapper">
            @* 
            Telerik ListView component for Metal Mart location navigation.
            Renders each location as a clickable navigation button.
            Simple template without pagination for continuous scrolling.
            *@
            <TelerikListView Data="@Locations" Class="button-list-container">
                <Template Context="loc">
                    @* 
                    Navigation link for each Metal Mart location.
                    Routes to individual store detail pages.
                    Uses Blazor NavLink for SPA navigation with clean styling.
                    *@
                    <NavLink class="text-decoration-none text-uppercase"
                             href="@($"/metalmart/{loc.Id}")">
                        @* 
                        Location button with Metal Mart-specific styling.
                        Features location name and city/state information.
                        Uses inline styles for specific typography requirements.
                        *@
                        <div class="menu-item py-3 px-4 my-2 rounded-3 k-text-white tracking-wider k-font-size-lg" style="font-size: medium; font-weight: bold; letter-spacing: 2px;">
                            @* Primary location name display *@
                            <div class="k-align-items-center">@loc.LocName</div>
                            @* Secondary location information: city and state *@
                            <div class="k-color-dark k-font-bold k-font-size-sm">@loc.City, @loc.State</div>
                        </div>
                    </NavLink>
                </Template>
            </TelerikListView>
        </div>
    </div>
}

@code {
    #region Private Properties

    /// <summary>
    /// Header card model configured for Metal Mart section display.
    /// Generated using HeaderCardModels.AreaManagers() factory method.
    /// Contains territory management hierarchy for Metal Mart operations.
    /// </summary>
    private HeaderCardModels.HeadInfoCardModel? StoreInfo;

    /// <summary>
    /// Collection of Metal Mart locations loaded from the database.
    /// Filtered by location type "metal mart" and sorted by location number.
    /// Used to generate navigation buttons for each store location.
    /// </summary>
    private List<Location> Locations = new();

    /// <summary>
    /// Individual store location entity (currently unused but preserved).
    /// Could be used for store-specific context or detailed information.
    /// </summary>
    private Location? Store;

    /// <summary>
    /// Store ID parameter (currently unused in this directory page).
    /// Preserved for potential future use or routing context.
    /// </summary>
    [Parameter]
    public int storeID { get; set; }

    /// <summary>
    /// Static dictionary mapping Metal Mart territories to their area managers.
    /// Used to populate the header card with management hierarchy information.
    /// Provides consistent territory management data across the application.
    /// </summary>
    private Dictionary<string, string> AreaManagers => new()
    {
        { "Northeast", "David Boyte" },
        { "Central", "John Baker" },
        { "South Central", "Beau Brown" },
        { "New Mexico", "Cliff Loveless" },
        { "Southeast", "Michael Northen" },
        { "Southwest", "Shaun Steinemann" }
    };

    /// <summary>
    /// Footer navigation items configuration for Metal Mart section.
    /// Provides navigation to main application sections but excludes Metal Mart
    /// since user is already in Metal Mart section (prevents redundant navigation).
    /// </summary>
    private List<FooterNav.FooterItem> FooterNavItems = new()
    {
        new FooterNav.FooterItem(CustomIcons.Home, "Home", "/"),
        new FooterNav.FooterItem(CustomIcons.Corporate, "Corporate", "/corporate"),
        // new FooterNav.FooterItem(CustomIcons.MetalMart, "Metal Mart", "/metalmart"), // Commented out - already in Metal Mart section
        new FooterNav.FooterItem(CustomIcons.ServiceCenter, "Service Center", "/servicecenter"),
        new FooterNav.FooterItem(CustomIcons.Plant, "Plant", "/plant")
    };

    #endregion

    #region Lifecycle Methods

    /// <summary>
    /// Component initialization method called when page loads.
    /// Fetches all Metal Mart locations and configures territory management header.
    /// Locations are sorted by location number for consistent presentation.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // Fetch all locations of type "metal mart" from the database
        Locations = await DirectoryService.GetLocationsByTypeAsync("metal mart");

        // Sort locations by location number for logical ordering
        // Provides predictable navigation sequence for users
        Locations = Locations.OrderBy(l => l.LocNum).ToList();

        // Create Metal Mart header card using AreaManagers factory method
        // Displays territory management hierarchy in a structured table format
        StoreInfo = HeaderCardModels.AreaManagers(
            title: "Metal Mart",                    // Main section title
            subtitle1: "Northeast",                 // First territory label
            tmanager1: "David Boyte",               // Northeast territory manager
            subtitle2: "Central",                   // Second territory label
            tmanager2: "John Baker",                // Central territory manager
            subtitle3: "South Central",             // Third territory label
            tmanager3: "Beau Brown",                // South Central territory manager
            subtitle4: "New Mexico",                // Fourth territory label
            tmanager4: "Cliff Loveless",            // New Mexico territory manager
            subtitle5: "Southeast",                 // Fifth territory label
            tmanager5: "Michael Northen",           // Southeast territory manager
            subtitle6: "Southwest",                 // Sixth territory label
            tmanager6: "Shaun Steinemann"           // Southwest territory manager
         );
    }

    /// <summary>
    /// Post-render lifecycle method for configuring layout state.
    /// Sets up Metal Mart-specific header with territory management and global footer navigation.
    /// Only executes on first render to avoid unnecessary state updates.
    /// </summary>
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && StoreInfo != null)
        {
            // Configure Metal Mart header with territory management hierarchy
            // Uses territory table layout to display area manager structure
            LayoutState.SetHeader(StoreInfo);

            // Set global footer navigation for section-to-section navigation
            LayoutState.SetFooter(FooterNavItems);
        }
    }

    #endregion
}
@* 
Service Center store detail page component displaying comprehensive information for a specific service center location.
Features the same dark theme design and intelligent layout switching as Metal Mart stores.
Uses alternating left/right information sections with decorative dividers for professional presentation.
Represents the detail level in Service Center navigation hierarchy: Service Center Directory > Store Details.
*@

@* Route definition with store ID parameter for specific Service Center location *@
@page "/servicecenter/{storeID:int}"

@* Required using statements for data models and UI components *@
@using MMPD.Data.Models
@using MMPD.Data.Context
@using MMPD.Shared.Components
@using MMPD.Shared.Layout
@using MMPD.Data
@using Telerik.Blazor
@using Telerik.Blazor.Components
@using Telerik.SvgIcons

@* Required dependency injections for page functionality *@
@inject IDirectoryService DirectoryService
@inject NavigationManager NavigationManager
@inject MMPD.Shared.Services.LayoutState LayoutState

@* Page title for browser tab/window *@
<PageTitle>Service Center Detail</PageTitle>

@* ===== LOADING STATE ===== *@
@* Display loading message while service center data is being fetched *@
@if (Store == null)
{
    <p>Loading store...</p>
}
else
{
    @* ===== MAIN CONTENT CONTAINER ===== *@
    @* 
    Full-height container with dark theme and decorative borders.
    Uses Telerik utility classes for border styling consistent with other detail pages.
    *@
    <div class="button-page-container k-border-top-2 k-border-bottom-8 k-border-x-0 k-border-solid k-border-dark-subtle">
        <div class="scrollable-wrapper">

            @* ===== STORE NAME SECTION (MOVED TO HEADER) ===== *@
            @* 
            Original store name section moved to header for consistency.
            Preserved for potential future use or alternative layout.
            *@
            @* 
            <div class="store-name-section">
                <h1 class="store-name">
                    @Store.LocName?.ToUpper()
                </h1>
            </div> 
            *@

            @* ===== SERVICE CENTER DETAILS SECTION ===== *@
            @* 
            Main content area with service center information in alternating layout sections.
            Uses conditional rendering to show only available information.
            Features intelligent layout switching between single and two-column formats.
            *@
            <div class="store-details">

                @* ===== STORE NUMBER AND HOURS SECTION ===== *@
                @* Two-column layout with service center number and operating hours *@
                <div class="section">
                    <div class="two-column">
                        @* Service center number display (right-aligned column) *@
                        @if (Store.LocNum.HasValue)
                        {
                            <div class="column">
                                <div class="right-divider">STORE</div>
                                <div class="section-content">@Store.LocNum</div>
                            </div>
                        }

                        @* Vertical divider between columns *@
                        <div class="divider-vertical"></div>

                        @* Service center hours display (left-aligned column) *@
                        @if (!string.IsNullOrWhiteSpace(Store.Hours))
                        {
                            <div class="column">
                                <div class="left-divider">HOURS</div>
                                <div class="section-content">@Store.Hours</div>
                            </div>
                        }
                    </div>
                </div>

                @* ===== ADDRESS SECTION ===== *@
                @* Left-aligned section with complete service center address information *@
                @if (!string.IsNullOrWhiteSpace(Store.Address))
                {
                    <div class="section section-left">
                        <div class="left-divider">ADDRESS</div>
                        <div class="section-content address-text">
                            @Store.Address <br />
                            @Store.City, @Store.State @Store.Zipcode
                        </div>
                    </div>
                }

                @* ===== PHONE AND FAX SECTION ===== *@
                @* 
                Intelligent layout switching for contact information:
                - Two-column layout when both phone and fax are available
                - Single right-aligned layout when only phone is available
                *@
                @if (!string.IsNullOrWhiteSpace(Store.PhoneNumber) || !string.IsNullOrWhiteSpace(Store.FaxNumber))
                {
                    <div class="section">
                        @if (!string.IsNullOrWhiteSpace(Store.FaxNumber))
                        {
                            @* Two-column layout when fax number exists *@
                            <div class="two-column">
                                @if (!string.IsNullOrWhiteSpace(Store.PhoneNumber))
                                {
                                    <div class="column">
                                        <div class="right-divider">PHONE</div>
                                        <div class="section-content">@Store.PhoneNumber</div>
                                    </div>
                                }
                                @* Vertical divider between phone and fax *@
                                <div class="divider-vertical"></div>
                                <div class="column">
                                    <div class="left-divider">FAX</div>
                                    <div class="section-content">@Store.FaxNumber</div>
                                </div>
                            </div>
                        }
                        else
                        {
                            @* Single column layout when no fax number available *@
                            @if (!string.IsNullOrWhiteSpace(Store.PhoneNumber))
                            {
                                <div class="section section-right">
                                    <div class="right-divider">PHONE</div>
                                    <div class="section-content" style="text-align: end;">@Store.PhoneNumber</div>
                                </div>
                            }
                        }
                    </div>
                }

                @* ===== EMAIL SECTION ===== *@
                @* Left-aligned section with service center email address *@
                @if (!string.IsNullOrWhiteSpace(Store.Email))
                {
                    <div class="section section-left">
                        <div class="left-divider">EMAIL</div>
                        <div class="section-content section-content-email" style="text-align: start;">@Store.Email</div>
                    </div>
                }

                @* ===== MANAGEMENT INFORMATION (MOVED TO HEADER) ===== *@
                @* 
                Store and area manager information moved to header card for consistency.
                Preserved here for reference but no longer displayed in main content.
                *@
                @* 
                @if (!string.IsNullOrWhiteSpace(Store.StoreManager))
                {
                    <div class="detail-section">
                        <div class="detail-label">STORE MANAGER</div>
                        <div class="detail-value">@Store.StoreManager</div>
                    </div>
                }

                @if (!string.IsNullOrWhiteSpace(Store.AreaManager))
                {
                    <div class="detail-section">
                        <div class="detail-label">AREA MANAGER</div>
                        <div class="detail-value">@Store.AreaManager</div>
                    </div>
                } 
                *@
            </div>
        </div>
    </div>
}

@code {
    #region Route Parameters

    /// <summary>
    /// Store ID route parameter extracted from the URL.
    /// Used to load specific Service Center store data and information.
    /// Corresponds to Location.Id in the database.
    /// </summary>
    [Parameter]
    public int storeID { get; set; }

    #endregion

    #region Private Properties

    /// <summary>
    /// Service Center store location entity with all store information.
    /// Loaded from database using the storeID route parameter.
    /// Contains all data displayed on the service center detail page.
    /// </summary>
    private Location? Store;

    /// <summary>
    /// Header card model configured for Service Center store display.
    /// Generated using HeaderCardModels.Store() factory method.
    /// Contains store name and management information for header display.
    /// </summary>
    private HeaderCardModels.HeadInfoCardModel? StoreInfo;

    /// <summary>
    /// Footer navigation items configuration for Service Center store section.
    /// Provides navigation to main application sections but excludes Service Center
    /// since user is already in Service Center section (prevents redundant navigation).
    /// </summary>
    private List<FooterNav.FooterItem> FooterNavItems = new()
    {
        new FooterNav.FooterItem(CustomIcons.Home, "Home", "/"),
        new FooterNav.FooterItem(CustomIcons.Corporate, "Corporate", "/corporate"),
        new FooterNav.FooterItem(CustomIcons.MetalMart, "Metal Mart", "/metalmart"),
        new FooterNav.FooterItem(CustomIcons.Plant, "Plant", "/plant")  // Fixed: Use Plant icon instead of ServiceCenter
    };

    #endregion

    #region Lifecycle Methods

    /// <summary>
    /// Parameter change handler called when route parameters change.
    /// Loads Service Center store data and configures header information.
    /// Uses Store factory method for management information display.
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        // Load the specific Service Center store using store ID and type filter
        Store = await DirectoryService.GetLocationByIdAsync("service center", storeID);

        // Create service center header card using Store factory method
        if (Store != null)
        {
            // Use the Store static factory method from HeaderCardModels
            // Displays store name and management hierarchy in header
            StoreInfo = HeaderCardModels.Store(
                title: Store.LocName ?? "Service Center",        // Fixed: Use "Service Center" instead of "Metal Mart Store"
                subtitle1: "Store Manager",                      // Label for store manager
                storemanager: Store.StoreManager ?? "",          // Store manager name
                subtitle2: "Area Manager",                       // Label for area manager
                areamanager: Store.AreaManager ?? ""             // Area manager name
            );
        }
    }

    /// <summary>
    /// Post-render lifecycle method for configuring layout state.
    /// Sets up Service Center store-specific header and global footer navigation.
    /// Only executes on first render to avoid unnecessary state updates.
    /// </summary>
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && StoreInfo != null)
        {
            // Configure service center header with name and management information
            LayoutState.SetHeader(StoreInfo);

            // Set global footer navigation for section-to-section navigation
            LayoutState.SetFooter(FooterNavItems);
        }
    }

    #endregion
}

@* ===== COMPONENT STYLING ===== *@
<style>
    /* ===== SERVICE CENTER DETAILS CONTAINER ===== */
    .store-details {
        background-color: var(--kendo-color-dark);
        padding: 30px 0;
    }

    /* ===== PAGE LAYOUT CONTAINERS ===== */
    .button-page-container {
        height: calc(100% - 60px);
        display: flex;
        flex-direction: column;
        background-color: var(--kendo-color-dark);
        padding-bottom: 10px;
        padding-top: 10px;
        margin: 0;
        color: var(--kendo-color-on-dark);
        position: relative;
    }

    .scrollable-wrapper {
        flex: 1;
        overflow-y: auto;
        padding: 0;
        scrollbar-width: none;
        -ms-overflow-style: none;
    }

        .scrollable-wrapper::-webkit-scrollbar {
            display: none;
        }

    /* ===== SECTION LAYOUT UTILITIES ===== */
    .section {
        position: relative;
        margin-bottom: 15px;
    }

    .section-right {
        padding-right: 2rem !important;
    }

    .section-left {
        padding-left: 2rem !important;
    }

    /* ===== CONTENT STYLING ===== */
    .section-content {
        font-size: clamp(0.9rem, 2vw + 0.75rem, 1.25rem);
        line-height: 1;
        letter-spacing: 1.25px;
    }

    .section-content-email {
        font-size: clamp(0.875rem, 2vw + 0.65rem, 1.25rem);
        text-overflow: ellipsis;
    }

    /* ===== TWO-COLUMN LAYOUT ===== */
    .two-column {
        display: flex;
        align-items: center;
    }

    .column {
        flex: 1;
    }

    /* ===== VERTICAL DIVIDER ===== */
    .divider-vertical {
        width: 2.5px;
        height: 3rem;
        background-color: #4a9eff;
        margin: 0 20px;
    }

    /* ===== COLUMN ALIGNMENT ===== */
    .column:first-child {
        text-align: right;
    }

    .column:last-child {
        text-align: left;
    }

    /* ===== ADDRESS-SPECIFIC STYLING ===== */
    .address-text {
        line-height: 1.3;
    }

    /* ===== DECORATIVE DIVIDER STYLING ===== */
    .left-divider {
        padding-top: 0.5rem;
        padding-bottom: 0.5rem;
        display: flex;
        align-items: center;
        font-size: 1.125rem;
        color: #d4af37;
        font-weight: 600;
        letter-spacing: 1.25px;
    }

        .left-divider::after {
            content: '';
            flex: 1;
            border-top: 3px solid #4a9eff;
            margin-left: 1rem;
        }

    .right-divider {
        padding-top: 0.5rem;
        padding-bottom: 0.5rem;
        display: flex;
        align-items: center;
        font-size: 1.125rem;
        color: #d4af37;
        font-weight: 600;
        letter-spacing: 1.25px;
    }

        .right-divider::before {
            content: '';
            flex: 1;
            border-top: 3px solid #4a9eff;
            margin-right: 1rem;
        }
</style>
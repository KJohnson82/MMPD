@page "/servicecenter/{storeID:int}"
@using MMPD.Data.Models
@using MMPD.Data.Context
@inject IDirectoryService DirectoryService
@inject NavigationManager NavigationManager
@using MMPD.Shared.Components
@using MMPD.Shared.Layout
@using MMPD.Data
@using Telerik.Blazor
@using Telerik.Blazor.Components
@using Telerik.SvgIcons
@inject MMPD.Shared.Services.LayoutState LayoutState

<PageTitle>Service Center Detail</PageTitle>

@if (Store == null)
{
    <p>Loading store...</p>
}
else
{
    <div class="button-page-container k-border-top-2 k-border-bottom-8 k-border-x-0 k-border-solid k-border-dark-subtle">
        <div class="scrollable-wrapper">

            <!-- Store Name Section -->
            @* <div class="store-name-section ">
                <h1 class="store-name">
                    @Store.LocName?.ToUpper()
                </h1>
                
            </div> *@

            <!-- Store Details Section -->
            <div class="store-details">



                <div class="section">
                    <div class="two-column">

                        @if (Store.LocNum.HasValue)
                        {
                            <div class="column ">
                                <div class="right-divider">STORE</div>
                                <div class="section-content">@Store.LocNum</div>
                            </div>
                        }


                        <div class="divider-vertical"></div>
                        @if (!string.IsNullOrWhiteSpace(Store.Hours))
                        {
                            <div class="column ">
                                <div class="left-divider">HOURS</div>
                                <div class="section-content">@Store.Hours</div>
                            </div>
                        }

                    </div>
                </div>

                @if (!string.IsNullOrWhiteSpace(Store.Address))
                {
                    <div class="section section-left">
                        <div class="left-divider">ADDRESS</div>
                        <div class="section-content address-text">
                            @Store.Address <br />
                            @Store.City, @Store.State @Store.Zipcode
                        </div>
                    </div>
                }

                @if (!string.IsNullOrWhiteSpace(Store.PhoneNumber) || !string.IsNullOrWhiteSpace(Store.FaxNumber))
                {
                    <div class="section">
                        @if (!string.IsNullOrWhiteSpace(Store.FaxNumber))
                        {
                            <!-- Two-column layout when fax exists -->
                            <div class="two-column">
                                @if (!string.IsNullOrWhiteSpace(Store.PhoneNumber))
                                {
                                    <div class="column">
                                        <div class="right-divider">PHONE</div>
                                        <div class="section-content">@Store.PhoneNumber</div>
                                    </div>
                                }
                                <div class="divider-vertical"></div>
                                <div class="column">
                                    <div class="left-divider">FAX</div>
                                    <div class="section-content">@Store.FaxNumber</div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <!-- Single column layout when no fax -->
                            @if (!string.IsNullOrWhiteSpace(Store.PhoneNumber))
                            {
                                <div class="section section-right">
                                    <div class="right-divider">PHONE</div>
                                    <div class="section-content" style="text-align: end;">@Store.PhoneNumber</div>
                                </div>
                            }
                        }
                    </div>
                }

                @if (!string.IsNullOrWhiteSpace(Store.Email))
                {
                    <div class="section section-left ">
                        <div class="left-divider">EMAIL</div>
                        <div class="section-content section-content-email" style="text-align: start;">@Store.Email</div>
                    </div>
                }



                @* @if (!string.IsNullOrWhiteSpace(Store.StoreManager))
                {
                    <div class="detail-section">
                        <div class="detail-label">STORE MANAGER</div>
                        <div class="detail-value">@Store.StoreManager</div>
                    </div>
                }

                @if (!string.IsNullOrWhiteSpace(Store.AreaManager))
                {
                    <div class="detail-section">
                        <div class="detail-label">AREA MANAGER</div>
                        <div class="detail-value">@Store.AreaManager</div>
                    </div>
                } *@
            </div>
        </div>
    </div>

@code {
    [Parameter]
    public int storeID { get; set; }

    private Location? Store;
    private HeaderCardModels.HeadInfoCardModel? StoreInfo;

    private List<FooterNav.FooterItem> FooterNavItems = new()
    {
        new FooterNav.FooterItem(CustomIcons.Home, "Home", "/"),
        new FooterNav.FooterItem(CustomIcons.Corporate, "Corporate", "/corporate"),
        new FooterNav.FooterItem(CustomIcons.MetalMart, "Metal Mart", "/metalmart"),
        new FooterNav.FooterItem(CustomIcons.ServiceCenter, "Plant", "/plant")
    };

    protected override async Task OnParametersSetAsync()
    {
        Store = await DirectoryService.GetLocationByIdAsync("service center", storeID);

        if (Store != null)
        {
            // You'll need to add a Store method to HeaderCardModels, or use Employee method
            StoreInfo = HeaderCardModels.Store(
                title: Store.LocName ?? "Metal Mart Store",
                subtitle1: "Store Manager",
                storemanager: Store.StoreManager ?? "",
                subtitle2: "Area Manager",
                areamanager: Store.AreaManager ?? ""
            );
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && StoreInfo != null)
        {
            LayoutState.SetHeader(StoreInfo);
            LayoutState.SetFooter(FooterNavItems);
        }
    }
}

    <style>
        .store-details {
            background-color: var(--kendo-color-dark);
            padding: 30px 0;
        }

        .button-page-container {
            height: calc(100% - 60px);
            display: flex;
            flex-direction: column;
            background-color: var(--kendo-color-dark);
            padding-bottom: 10px;
            padding-top: 10px;
            margin: 0;
            color: var(--kendo-color-on-dark);
            position: relative;
        }

        .scrollable-wrapper {
            flex: 1;
            overflow-y: auto;
            padding: 0;
            scrollbar-width: none;
            -ms-overflow-style: none;
        }

            .scrollable-wrapper::-webkit-scrollbar {
                display: none;
            }

        .section {
            position: relative;
            margin-bottom: 15px;
        }

        .section-right {
            padding-right: 2rem !important;
        }

        .section-left {
            padding-left: 2rem !important;
        }

        .section-content {
            font-size: clamp(0.9rem, 2vw + 0.75rem, 1.25rem);
            line-height: 1;
            letter-spacing: 1.25px;
        }

        .section-content-email {
            font-size: clamp(0.875rem, 2vw + 0.65rem, 1.25rem);
            text-overflow: ellipsis;
        }

        .two-column {
            display: flex;
            align-items: center;
        }

        .column {
            flex: 1;
        }

        .divider-vertical {
            width: 2.5px;
            height: 3rem;
            background-color: #4a9eff;
            margin: 0 20px;
        }

        .column:first-child {
            text-align: right;
        }

        .column:last-child {
            text-align: left;
        }

        .address-text {
            line-height: 1.3;
        }

        .left-divider {
            padding-top: 0.5rem;
            padding-bottom: 0.5rem;
            display: flex;
            align-items: center;
            font-size: 1.125rem;
            color: #d4af37;
            font-weight: 600;
            letter-spacing: 1.25px;
        }

            .left-divider::after {
                content: '';
                flex: 1;
                border-top: 3px solid #4a9eff;
                margin-left: 1rem;
            }

        .right-divider {
            padding-top: 0.5rem;
            padding-bottom: 0.5rem;
            display: flex;
            align-items: center;
            font-size: 1.125rem;
            color: #d4af37;
            font-weight: 600;
            letter-spacing: 1.25px;
        }

            .right-divider::before {
                content: '';
                flex: 1;
                border-top: 3px solid #4a9eff;
                margin-right: 1rem;
            }
    </style>
    
}


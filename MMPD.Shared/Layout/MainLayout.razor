
@inherits LayoutComponentBase
@using Telerik.Blazor
@using Telerik.Blazor.Components
@implements IDisposable
@inject NavigationManager NavigationManager

@inject MMPD.Shared.Services.LayoutState LayoutState


<TelerikRootComponent>
    <div class="main-layout-container">
        
        <header class="main-layout-header" >
            @* <HeaderCard Info="LayoutState.HeaderInfo" /> *@
            @if (IsStoreSpecificPage())
            {
                <StoreTitleCard StoreInfo="GetStoreInfo()" />
            }
            else
            {
                <HeadTitleCard Info="LayoutState.HeaderInfo" />
            }
            
            @* <HeadTitleCard Info="LayoutState.HeaderInfo" /> *@
        </header>

        <main class="main-layout-content no-scrollbar">
            @Body
        </main>

        <footer class="main-layout-footer">
            <FooterNav Items="LayoutState.FooterItems" />
        </footer>

    </div>
</TelerikRootComponent>

@code {
    protected override void OnInitialized()
    {
        LayoutState.OnChange += OnStateChanged;
    }

    private async void OnStateChanged()
    {
        // Safely update the UI when the state changes
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        // Unsubscribe to prevent memory leaks
        LayoutState.OnChange -= OnStateChanged;
    }

    private bool IsStoreSpecificPage()
    {
        var relativePath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);

        // Check if the current path matches the store-specific page patterns
        return relativePath.StartsWith("metalmart/", StringComparison.OrdinalIgnoreCase) ||
               relativePath.StartsWith("servicecenter/", StringComparison.OrdinalIgnoreCase);
    }

    private StoreTitleCard.StoreTitleCardModel? GetStoreInfo()
    {
        if (LayoutState.HeaderInfo == null)
            return null;

        // Convert HeaderInfo to StoreTitleCardModel
        return new StoreTitleCard.StoreTitleCardModel
        {
            Title = LayoutState.HeaderInfo.Title ?? string.Empty,
            StoreManager = LayoutState.HeaderInfo.StoreManager ?? string.Empty,
            AreaManager = LayoutState.HeaderInfo.AreaManager ?? string.Empty
        };
    }
}

<style>
    /* .main-layout-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
    }

    .main-layout-header,
    .main-layout-footer {
        flex-shrink: 0; 
    }

    .main-layout-content {
        flex-grow: 1; 
        overflow-y: auto; 
    } */
    .main-layout-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
    }

    .main-layout-header {
        flex-shrink: 0; /* Prevents header from shrinking */
        
    }

    .main-layout-footer {
        flex-shrink: 0; /* Prevents footer from shrinking */
        
    }

    .main-layout-content {
        flex: 1; /* Takes up remaining space between header and footer */
        overflow-y: hidden; /* Adds scrollbar if content overflows */
        min-height: 0; /* Ensures flexbox works properly */
    }
</style>
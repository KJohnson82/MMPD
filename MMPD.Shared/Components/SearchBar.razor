@* 
Search bar component providing comprehensive search functionality across the application.
Features auto-search with debouncing, modal results display, and persistent search state.
Designed as a horizontal app bar with back button and search input.
*@

@* Required using statements for data access, components, and Telerik UI *@
@using MMPD
@using MMPD.Data
@using MMPD.Shared.Components
@using MMPD.Shared.Services
@using Microsoft.AspNetCore.Components
@using Telerik.Blazor
@using Telerik.Blazor.Components
@using Telerik.SvgIcons

@* Inject search service for performing database searches *@
@inject MMPD.Shared.Services.SearchService SearchService

@* 
Telerik AppBar component configured as a horizontal search interface.
Uses inverse theme color for contrast and fixed height for consistent appearance.
Three-section layout: back button, search input (flexible), and optional search button.
*@
<TelerikAppBar ThemeColor="@ThemeConstants.AppBar.ThemeColor.Inverse"
               Height="65px"
               Class="k-d-flex"
               Position="AppBarPosition.None">

    @* ===== BACK BUTTON SECTION ===== *@
    @* Fixed-width section on the left containing the back navigation button *@
    <AppBarSection Class="k-justify-content-start">
        <BackButton>
            @* Bold, large text for the back button to ensure visibility *@
            <span class="k-font-size-lg k-font-bold">BACK</span>
        </BackButton>
    </AppBarSection>

    @* ===== SEARCH INPUT SECTION ===== *@
    @* Flexible section that expands to fill remaining space between back and search buttons *@
    <AppBarSection class="k-d-flex k-align-items-center k-flex-grow">
        @* 
        Main search input with auto-search functionality.
        Features debounced input, clear button, and responsive design.
        *@
        <TelerikTextBox Rounded="lg"
                        Class="k-w-full search-input"
                        Width="100%"
                        Size="@ThemeConstants.Button.Size.Large"
                        Placeholder="Search..."
                        Value="@SearchQuery"
                        ValueChanged="@OnSearchValueChanged"
                        ShowClearButton="true"
                        DebounceDelay="300"
                        Id="main-search-input" />
    </AppBarSection>

    @* ===== SEARCH BUTTON SECTION (COMMENTED OUT) ===== *@
    @* 
    Optional dedicated search button - currently disabled in favor of auto-search.
    Preserved for potential future use or manual search mode.
    *@
    @* 
    <AppBarSection Class="k-justify-content-end">
        <TelerikButton ThemeColor="@ThemeConstants.Button.ThemeColor.Primary"
                       Class="k-p-6"
                       Size="@ThemeConstants.Button.Size.Large"
                       Icon="@SvgIcon.Search"
                       FillMode="@ThemeConstants.Button.FillMode.Solid"
                       ButtonType="ButtonType.Button"
                       OnClick="@PerformSearch"
                       Enabled="@(!string.IsNullOrWhiteSpace(SearchQuery))" />
    </AppBarSection> 
    *@
</TelerikAppBar>

@* ===== SEARCH RESULTS MODAL ===== *@
@* 
Modal component for displaying search results in an overlay.
Manages visibility state and passes search term to the modal component.
*@
<SearchResultsModal IsVisible="@ShowSearchModal"
                    IsVisibleChanged="@OnSearchModalVisibilityChanged"
                    SearchTerm="@CurrentSearchTerm" />

@code {
    #region Private Properties

    /// <summary>
    /// Current value of the search input field.
    /// Updated in real-time as user types, used for debounced search logic.
    /// </summary>
    private string SearchQuery { get; set; } = string.Empty;

    /// <summary>
    /// The search term that was actually submitted for search.
    /// Differs from SearchQuery during typing - only updated when search is performed.
    /// Passed to the search results modal for display and API calls.
    /// </summary>
    private string CurrentSearchTerm { get; set; } = string.Empty;

    /// <summary>
    /// Controls the visibility of the search results modal.
    /// True when search results should be displayed, false when hidden.
    /// </summary>
    private bool ShowSearchModal { get; set; } = false;

    #endregion

    #region Event Handlers

    /// <summary>
    /// Handles changes to the search input value with debounced auto-search functionality.
    /// Implements smart search logic: searches automatically for queries >= 2 characters,
    /// clears results when input is empty, and debounces rapid typing.
    /// </summary>
    /// <param name="newValue">The new value entered in the search input</param>
    private async Task OnSearchValueChanged(string newValue)
    {
        SearchQuery = newValue;

        // Auto-search logic for queries with sufficient length
        if (!string.IsNullOrWhiteSpace(newValue) && newValue.Length >= 2)
        {
            // Debounce mechanism: wait to see if user continues typing
            // This prevents excessive API calls while user is actively typing
            await Task.Delay(100);

            // Only proceed if search query hasn't changed (user stopped typing)
            if (SearchQuery == newValue)
            {
                await PerformSearch();
            }
        }
        else if (string.IsNullOrWhiteSpace(newValue))
        {
            // Auto-clear search results when input is completely cleared
            // Provides immediate feedback and clean state
            ShowSearchModal = false;
            CurrentSearchTerm = string.Empty;
        }
    }

    /// <summary>
    /// Performs the actual search operation and displays results in modal.
    /// Updates the current search term and shows the modal with results.
    /// Called automatically by debounced input or manually by search button.
    /// </summary>
    private async Task PerformSearch()
    {
        // Validate search query before proceeding
        if (string.IsNullOrWhiteSpace(SearchQuery))
            return;

        // Update the official search term and show results modal
        CurrentSearchTerm = SearchQuery.Trim();
        ShowSearchModal = true;
        StateHasChanged(); // Force UI update to show modal immediately
    }

    /// <summary>
    /// Handles visibility changes of the search results modal.
    /// Manages search state when modal is opened/closed by user.
    /// Preserves search term when modal is closed for potential re-opening.
    /// </summary>
    /// <param name="isVisible">New visibility state of the modal</param>
    private async Task OnSearchModalVisibilityChanged(bool isVisible)
    {
        ShowSearchModal = isVisible;

        if (!isVisible)
        {
            // When modal is closed, clear the search term but preserve input value
            // This allows user to modify search and search again without losing context
            CurrentSearchTerm = string.Empty;
        }

        StateHasChanged(); // Ensure UI reflects the state change
    }

    #endregion
}

@* ===== SEARCH BAR STYLING ===== *@
<style>
    /* ===== APP BAR LAYOUT FIXES ===== */
    /* Ensure consistent AppBar layout without affecting parent layout */
    .k-appbar {
        display: flex !important; /* Force flexbox layout */
        flex-direction: row !important; /* Horizontal arrangement of sections */
        gap: 10px; /* Consistent spacing between sections */
        width: 100%; /* Full width of container */
        height: 65px; /* Fixed height for consistent appearance */
        box-sizing: border-box; /* Include padding/border in height calculation */
    }

        /* ===== SECTION-SPECIFIC STYLING ===== */
        /* Back button section - fixed width, no growing */
        .k-appbar > .k-appbar-section:first-child {
            flex: 0 0 auto; /* Don't grow or shrink, use natural size */
        }

        /* Search button section - add padding for visual balance */
        .k-appbar > .k-appbar-section:last-child {
            padding-right: 2px; /* Small right padding for edge spacing */
        }

    /* ===== SEARCH INPUT STYLING ===== */
    .search-input {
        min-width: 0; /* Allow shrinking below natural width if needed */
        flex: 1; /* Grow to fill available space */
    }

        /* Remove unexpected margins/padding from Telerik textbox */
        .search-input .k-textbox {
            margin: 0; /* Reset any default margins */
            padding: 0; /* Reset any default padding */
        }
</style>
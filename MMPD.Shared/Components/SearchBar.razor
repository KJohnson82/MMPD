@using MMPD
@using MMPD.Data
@using MMPD.Shared.Components
@using MMPD.Shared.Services
@using Microsoft.AspNetCore.Components
@using Telerik.Blazor
@using Telerik.Blazor.Components
@using Telerik.SvgIcons
@inject MMPD.Shared.Services.SearchService SearchService

<TelerikAppBar ThemeColor="@ThemeConstants.AppBar.ThemeColor.Inverse"
               Height="65px"
               Class="k-d-flex"
               Position="AppBarPosition.None">

    <!-- Back button - always visible on the left -->
    <AppBarSection Class="k-justify-content-start">
        <BackButton>
            <span class="k-font-size-lg k-font-bold">BACK</span>
        </BackButton>
    </AppBarSection>

    <!-- Search box - takes up remaining space -->
    <AppBarSection class="k-d-flex k-align-items-center k-flex-grow">
        <TelerikTextBox Rounded="lg"
                        Class="k-w-full search-input"
                        Width="100%"
                        Size="@ThemeConstants.Button.Size.Large"
                        Placeholder="Search..."
                        Value="@SearchQuery"
                        ValueChanged="@OnSearchValueChanged"
                        ShowClearButton="true"
                        DebounceDelay="300"
                        Id="main-search-input" />
    </AppBarSection>

    <!-- Search button -->
    @* <AppBarSection Class="k-justify-content-end">
        <TelerikButton ThemeColor="@ThemeConstants.Button.ThemeColor.Primary"
                       Class="k-p-6"
                       Size="@ThemeConstants.Button.Size.Large"
                       Icon="@SvgIcon.Search"
                       FillMode="@ThemeConstants.Button.FillMode.Solid"
                       ButtonType="ButtonType.Button"
                       OnClick="@PerformSearch"
                       Enabled="@(!string.IsNullOrWhiteSpace(SearchQuery))" />
    </AppBarSection> *@
</TelerikAppBar>

<!-- Search Results Modal -->
<SearchResultsModal IsVisible="@ShowSearchModal"
                    IsVisibleChanged="@OnSearchModalVisibilityChanged"
                    SearchTerm="@CurrentSearchTerm" />

@code {
    private string SearchQuery { get; set; } = string.Empty;
    private string CurrentSearchTerm { get; set; } = string.Empty;
    private bool ShowSearchModal { get; set; } = false;

    private async Task OnSearchValueChanged(string newValue)
    {
        SearchQuery = newValue;

        // Auto-search when user types (with debounce)
        if (!string.IsNullOrWhiteSpace(newValue) && newValue.Length >= 2)
        {
            // Wait a bit to see if user is still typing
            await Task.Delay(100);
            if (SearchQuery == newValue) // User stopped typing
            {
                await PerformSearch();
            }
        }
        else if (string.IsNullOrWhiteSpace(newValue))
        {
            // Clear search when text is cleared
            ShowSearchModal = false;
            CurrentSearchTerm = string.Empty;
        }
    }

    private async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(SearchQuery))
            return;

        CurrentSearchTerm = SearchQuery.Trim();
        ShowSearchModal = true;
        StateHasChanged();
    }

    private async Task OnSearchModalVisibilityChanged(bool isVisible)
    {
        ShowSearchModal = isVisible;
        if (!isVisible)
        {
            // Don't clear search when modal is closed - preserve search term
            CurrentSearchTerm = string.Empty;
        }
        StateHasChanged();
    }
}

<style>
    /* Ensure consistent AppBar layout without affecting parent layout */
    .k-appbar {
        display: flex !important;
        flex-direction: row !important;
        gap: 10px;
        width: 100%;
        height: 65px;
        box-sizing: border-box;
    }

        .k-appbar > .k-appbar-section:first-child {
            flex: 0 0 auto;
        }

        .k-appbar > .k-appbar-section:last-child {
            padding-right: 2px;
        }

    .search-input {
        min-width: 0;
        flex: 1;
    }

        /* Ensure no unexpected margins or padding */
        .search-input .k-textbox {
            margin: 0;
            padding: 0;
        }
</style>
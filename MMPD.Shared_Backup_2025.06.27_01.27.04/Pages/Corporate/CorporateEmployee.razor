@page "/corporate/{departmentID:int}/{employeeID:int}"
@using MMPD.Data.Models
@using MMPD.Data.Context
@using MMPD.Data.Data
@inject IDirectoryService DirectoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using MMPD.Shared.Components
@using MMPD.Shared.Layout
@using Telerik.Blazor
@using Telerik.Blazor.Components
@using Telerik.SvgIcons

<PageTitle>Employee</PageTitle>

@if (Employee == null)
{
    <p>Loading employee...</p>
}
else
{
    <div class="flex flex-col h-screen">
        <section>
            <HeaderCard Info="EmployeeInfo" />
        </section>

        <section class="flex-grow bg-background justify-center overflow-y-scroll no-scrollbar">
            <section class="shadow-sm drop-shadow-sm">
                <BackButton />
            </section>

            <TelerikCard Class="mx-4 my-4 bg-primary text-white">
                <CardHeader>
                    <h2 class="text-2xl font-semibold">@Employee.FirstName @Employee.LastName</h2>
                    <p class="text-sm text-accent">@Employee.JobTitle</p>
                </CardHeader>

                <CardBody Class="bg-secondary text-sm space-y-1">
                    @if (!string.IsNullOrWhiteSpace(Employee.Email))
                    {
                        <div><strong>Email:</strong> @Employee.Email</div>
                    }
                    @if (!string.IsNullOrWhiteSpace(Employee.PhoneNumber))
                    {
                        <div><strong>Phone:</strong> @Employee.PhoneNumber</div>
                    }
                    @if (!string.IsNullOrWhiteSpace(Employee.Extension))
                    {
                        <div><strong>Extension:</strong> @Employee.Extension</div>
                    }
                    @if (!string.IsNullOrWhiteSpace(Employee.CellNumber))
                    {
                        <div><strong>Cell:</strong> @Employee.CellNumber</div>
                    }
                    @if (!string.IsNullOrWhiteSpace(Employee.NetworkId))
                    {
                        <div><strong>Network ID:</strong> @Employee.NetworkId</div>
                    }
                </CardBody>

                <CardActions Class="bg-primary">
                    <TelerikButton OnClick="@GoBack" Icon="SvgIcon.ArrowLeft">Back</TelerikButton>
                </CardActions>
            </TelerikCard>
        </section>

        <section class="box-border mt-0 pb-3">
            <FooterNav Items="FooterNavItems" />
        </section>
    </div>
}

@code {
    [Parameter] public int departmentID { get; set; }
    [Parameter] public int employeeID { get; set; }

    private Department? Department;
    private Employee? Employee;
    private HeaderCard.HeadInfoCardModel EmployeeInfo = new();

    private List<FooterNav.FooterItem> FooterNavItems = new()
    {
        new FooterNav.FooterItem(CustomIcons.Home, "Home", "/"),
        new FooterNav.FooterItem(CustomIcons.Corporate, "Corporate", "/corporate"),
        new FooterNav.FooterItem(CustomIcons.MetalMart, "Metal Mart", "/metalmart"),
        new FooterNav.FooterItem(CustomIcons.ServiceCenter, "Service Center", "/servicecenter")
    };

    protected override async Task OnParametersSetAsync()
    {
        // var data = await DirectoryService.GetDataRootAsync();

        // Department = data?.Loctype["corporate"].Locations
        //     .SelectMany(l => l.Departments)
        //     .FirstOrDefault(d => d.Id == departmentID);

        // Employee = Department?.Employees.FirstOrDefault(e => e.Id == employeeID);

        Employee = await DirectoryService.GetEmployeeByIdAsync(employeeID);

        if (Employee is not null)
        {
            EmployeeInfo = new HeaderCard.HeadInfoCardModel
            {
                Title = Department?.DeptName ?? "Employee",
                Subtitle1 = "Job Title",
                Phone = Employee?.JobTitle!
                // Subtitle2 = "Email",
                // Email = Employee.Email,
                // Subtitle3 = "Phone",
                // Phone2 = Employee.PhoneNumber
            };
        }
    }

    private async void GoBack()
    {
        await JSRuntime.InvokeVoidAsync("goBack");
    }
}
